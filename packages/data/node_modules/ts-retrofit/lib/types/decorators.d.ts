import { ResponseType as AxiosResponseType, AxiosTransformer, AxiosRequestConfig } from "axios";
import { BaseService } from "./baseService";
interface Headers {
    [x: string]: string | number;
}
interface Query {
    [x: string]: string | number | boolean;
}
export interface PartDescriptor<T> {
    value: T;
    filename?: string;
    contentType?: string;
}
export interface HttpMethodOptions {
    ignoreBasePath?: boolean;
}
export type QueryArrayFormat = "indices" | "brackets" | "repeat" | "comma";
export interface QueryOptions {
    arrayFormat?: QueryArrayFormat;
}
/**
 * GET decorator.
 * @param url
 * @param options
 * @sample @GET("/users")
 * @constructor
 */
export declare const GET: (url: string, options?: HttpMethodOptions) => (target: BaseService, methodName: string, descriptor: PropertyDescriptor) => void;
/**
 * POST decorator.
 * @param url
 * @param options
 * @sample @POST("/users")
 * @constructor
 */
export declare const POST: (url: string, options?: HttpMethodOptions) => (target: BaseService, methodName: string, descriptor: PropertyDescriptor) => void;
/**
 * PUT decorator.
 * @param url
 * @param options
 * @sample @PUT("/users/{userId}")
 * @constructor
 */
export declare const PUT: (url: string, options?: HttpMethodOptions) => (target: BaseService, methodName: string, descriptor: PropertyDescriptor) => void;
/**
 * PATCH decorator.
 * @param url
 * @param options
 * @sample @PATCH("/users/{userId}")
 * @constructor
 */
export declare const PATCH: (url: string, options?: HttpMethodOptions) => (target: BaseService, methodName: string, descriptor: PropertyDescriptor) => void;
/**
 * DELETE decorator.
 * @param url
 * @param options
 * @sample @DELETE("/users/{userId}")
 * @constructor
 */
export declare const DELETE: (url: string, options?: HttpMethodOptions) => (target: BaseService, methodName: string, descriptor: PropertyDescriptor) => void;
/**
 * HEAD decorator.
 * @param url
 * @param options
 * @sample @HEAD("/users/{userId}")
 * @constructor
 */
export declare const HEAD: (url: string, options?: HttpMethodOptions) => (target: BaseService, methodName: string, descriptor: PropertyDescriptor) => void;
/**
 * OPTIONS decorator.
 * @param url
 * @param options
 * @sample @OPTIONS("/users/{userId}")
 * @constructor
 */
export declare const OPTIONS: (url: string, options?: HttpMethodOptions) => (target: BaseService, methodName: string, descriptor: PropertyDescriptor) => void;
/**
 * Set base path for API service.
 * @param path
 * @sample @BasePath("/api/v1")
 * @constructor
 */
export declare const BasePath: (path: string) => (target: typeof BaseService) => void;
/**
 * Set path parameter for API endpoint.
 * @param paramName
 * @sample @Path("userId") userId: number
 * @constructor
 */
export declare const Path: (paramName: string) => (target: any, methodName: string, paramIndex: number) => void;
/**
 * Set body for API endpoint.
 * @param target
 * @param methodName
 * @param paramIndex
 * @sample @Body user: User
 * @constructor
 */
export declare const Body: (target: any, methodName: string, paramIndex: number) => void;
/**
 * Set static HTTP headers for API endpoint.
 * @param headers
 * @sample @Headers({
 *           "Content-Type": "application/x-www-form-urlencoded;charset=utf-8",
 *           "Accept": "application/json"
 *         })
 * @constructor
 */
export declare const Headers: (headers: Headers) => (target: any, methodName: string, descriptor: PropertyDescriptor) => void;
/**
 * Set HTTP header as variable in API method.
 * @param paramName
 * @sample @Header("X-Token") token: string
 * @constructor
 */
export declare const Header: (paramName: string) => (target: any, methodName: string, paramIndex: number) => void;
/**
 * Set header map for API endpoint.
 * @param target
 * @param methodName
 * @param paramIndex
 * @sample @HeaderMap headers: any
 * @constructor
 */
export declare const HeaderMap: (target: any, methodName: string, paramIndex: number) => void;
/**
 * Set array format for query
 * @param queryArrayFormat
 * @sample @QueryArrayFormat('repeat')
 * @constructor
 */
export declare const QueryArrayFormat: (queryArrayFormat: QueryArrayFormat) => (target: BaseService, methodName: string, descriptor: PropertyDescriptor) => void;
/**
 * Set static query for API endpoint.
 * @param query
 * @sample @Queries({
 *           page: 1,
 *           size: 20,
 *           sort: "createdAt:desc",
 *         })
 * @constructor
 */
export declare const Queries: (query: Query) => (target: any, methodName: string, descriptor: PropertyDescriptor) => void;
/**
 * Set query as variable in API method.
 * @param paramName
 * @sample @Query('group') group: string
 * @constructor
 */
export declare const Query: (paramName: string) => (target: any, methodName: string, paramIndex: number) => void;
/**
 * Set query map for API endpoint.
 * @param target
 * @param methodName
 * @param paramIndex
 * @sample @QueryMap query: SearchQuery
 * @constructor
 */
export declare const QueryMap: (target: any, methodName: string, paramIndex: number) => void;
/**
 * 'content-type': 'application/x-www-form-urlencoded;charset=utf-8' will be added.
 * @param target
 * @param methodName
 * @param descriptor
 * @sample @FormUrlEncoded
 * @constructor
 */
export declare const FormUrlEncoded: (target: any, methodName: string, descriptor: PropertyDescriptor) => void;
/**
 * Set field of form for API endpoint. Only effective when method has been decorated by @FormUrlEncoded.
 * @param paramName
 * @sample @Field("title") title: string
 * @constructor
 */
export declare const Field: (paramName: string) => (target: any, methodName: string, paramIndex: number) => void;
/**
 * Set field map for API endpoint.
 * @param target
 * @param methodName
 * @param paramIndex
 * @sample @FieldMap post: Post
 * @constructor
 */
export declare const FieldMap: (target: any, methodName: string, paramIndex: number) => void;
/**
 * 'content-type': 'multipart/form-data' will be added to HTTP headers.
 * @param target
 * @param methodName
 * @param descriptor
 * @sample @Multipart
 * @constructor
 */
export declare const Multipart: (target: any, methodName: string, descriptor: PropertyDescriptor) => void;
/**
 * Set part of form data for API endpoint. Only effective when method has been decorated by @Multipart.
 * @param paramName
 * @sample @Part("bucket") bucket: PartDescriptor<string>
 * @constructor
 */
export declare const Part: (paramName: string) => (target: any, methodName: string, paramIndex: number) => void;
/**
 * Set the response type for method.
 * @param responseType
 * @sample @ResponseType("stream")
 * @constructor
 */
export declare const ResponseType: (responseType: AxiosResponseType) => (target: any, methodName: string) => void;
/**
 * Set request transformer for method.
 * @param transformer
 * @sample @RequestTransformer((data: any, headers?: any) => {
 *           data.foo = 'foo';
 *           return JSON.stringify(data);
 *         })
 * @constructor
 */
export declare const RequestTransformer: (transformer: AxiosTransformer) => (target: any, methodName: string) => void;
/**
 * Set response transformer for method.
 * @param transformer
 * @sample @ResponseTransformer((data: any, headers?: any) => {
 *           const json = JSON.parse(data);
 *           json.foo = 'foo';
 *           return json;
 *         })
 * @constructor
 */
export declare const ResponseTransformer: (transformer: AxiosTransformer) => (target: any, methodName: string) => void;
/**
 * Set timeout for method, this config will shield service timeout.
 * @param timeout
 * @sample @Timeout(5000)
 * @constructor
 */
export declare const Timeout: (timeout: number) => (target: any, methodName: string) => void;
/**
 * Declare response status code for method, do nothing just a declaration.
 * @param responseStatus
 * @sample ResponseStatus(204)
 * @constructor
 */
export declare const ResponseStatus: (responseStatus: number) => (target: any, methodName: string) => void;
/**
 * A direct way to set config for a request in axios.
 * @param config
 * @sample @Config({ maxRedirects: 1 })
 * @constructor
 */
export declare const Config: (config: Partial<AxiosRequestConfig>) => (target: any, methodName: string) => void;
/**
 * A easy way to send GraphQL query.
 * @param query
 * @param operationName
 * @sample @GraphQL(gqlQuery)
 * @constructor
 */
export declare const GraphQL: (query: string, operationName?: string) => (target: any, methodName: string) => void;
/**
 * Adds variables to GraphQL query
 * @param target
 * @param methodName
 * @param paramIndex
 * @sample @GraphQLVariables variables: any
 * @constructor
 */
export declare const GraphQLVariables: (target: any, methodName: string, paramIndex: number) => void;
/**
 * Mark method as deprecated
 * @param hint
 * @sample @Deprecated("This method is deprecated on version 2.0, please use xxx.")
 * @constructor
 */
export declare const Deprecated: (hint?: string) => (target: any, methodName: string, descriptor: PropertyDescriptor) => void;
export {};
