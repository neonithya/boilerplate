"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.passParamNameAsInjectArgument = exports.paramsToDestructuringAssignment = exports.getDecoratorName = exports.getDecoratorByName = exports.getMethodName = exports.getDecoratorArgument = exports.addNameToProviderArguments = exports.providerIsNotNamed = void 0;
/* eslint-disable no-param-reassign */
var core_1 = require("@babel/core");
var lodash_1 = require("lodash");
var never = '';
function providerIsNotNamed(decorator) {
    var argument = getDecoratorArgument(decorator);
    if (core_1.types.isObjectExpression(argument)) {
        return argument.properties.find(function (p) {
            if (core_1.types.isObjectProperty(p)) {
                return core_1.types.isIdentifier(p.key) && p.key.name === 'name';
            }
            return false;
        }) === undefined;
    }
    return true;
}
exports.providerIsNotNamed = providerIsNotNamed;
function addNameToProviderArguments(node, decorator) {
    var _a;
    var argument = (_a = getDecoratorArgument(decorator)) !== null && _a !== void 0 ? _a : core_1.types.objectExpression([]);
    argument.properties.push(core_1.types.objectProperty(core_1.types.identifier('name'), core_1.types.stringLiteral(getMethodName(node))));
    decorator.expression.arguments = [argument];
}
exports.addNameToProviderArguments = addNameToProviderArguments;
function getDecoratorArgument(decorator) {
    if (core_1.types.isCallExpression(decorator.expression)) {
        return decorator.expression.arguments.find(function (a) { return core_1.types.isObjectExpression(a); });
    }
    return undefined;
}
exports.getDecoratorArgument = getDecoratorArgument;
function getMethodName(node) {
    if (core_1.types.isIdentifier(node.key))
        return node.key.name;
    throw new Error("Tried to get class name but encountered unexpected key of type: ".concat(node.key.type));
}
exports.getMethodName = getMethodName;
function getDecoratorByName(decorators, decoratorName) {
    return decorators === null || decorators === void 0 ? void 0 : decorators.find(function (decorator) { return (0, lodash_1.get)(decorator, 'expression.callee.name') === decoratorName; });
}
exports.getDecoratorByName = getDecoratorByName;
function getDecoratorName(decorator) {
    return (0, lodash_1.get)(decorator, 'expression.callee.name');
}
exports.getDecoratorName = getDecoratorName;
function paramsToDestructuringAssignment(params) {
    return core_1.types.objectPattern(params
        .filter(function (p) { return core_1.types.isIdentifier(p); })
        .map(function (p) { return core_1.types.objectProperty(core_1.types.identifier(p.name), core_1.types.identifier(p.name)); }));
}
exports.paramsToDestructuringAssignment = paramsToDestructuringAssignment;
function passParamNameAsInjectArgument(node, decorator) {
    if (core_1.types.isCallExpression(decorator.expression)) {
        decorator.expression.arguments = [
            core_1.types.stringLiteral(getNodeName(node)),
        ];
    }
}
exports.passParamNameAsInjectArgument = passParamNameAsInjectArgument;
function getNodeName(node) {
    if (core_1.types.isTSParameterProperty(node)) {
        if (core_1.types.isIdentifier(node.parameter)) {
            return node.parameter.name;
        }
        return never;
    }
    if (core_1.types.isClassProperty(node)) {
        if (core_1.types.isIdentifier(node.key)) {
            return node.key.name;
        }
        return never;
    }
    return node.name;
}
//# sourceMappingURL=index.js.map