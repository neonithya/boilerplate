"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var InjectionMetadata_1 = __importDefault(require("./InjectionMetadata"));
var LateInjector_1 = require("./LateInjector");
var ClassInjector = /** @class */ (function () {
    function ClassInjector(graphRegistry, injectionMetadata) {
        if (injectionMetadata === void 0) { injectionMetadata = new InjectionMetadata_1.default(); }
        this.graphRegistry = graphRegistry;
        this.injectionMetadata = injectionMetadata;
    }
    ClassInjector.prototype.inject = function (Graph) {
        var _this = this;
        return function (Target) {
            return new Proxy(Target, _this.createProxyHandler(Graph, _this.graphRegistry, _this.injectionMetadata));
        };
    };
    ClassInjector.prototype.createProxyHandler = function (Graph, graphRegistry, injectionMetadata) {
        return new /** @class */ (function () {
            function Handler() {
            }
            Handler.prototype.construct = function (target, args, newTarget) {
                var graph = graphRegistry.resolve(Graph);
                Reflect.defineMetadata(LateInjector_1.GRAPH_INSTANCE_NAME_KEY, graph.name, target);
                var argsToInject = this.injectConstructorArgs(args, graph, target);
                var createdObject = Reflect.construct(target, argsToInject, newTarget);
                this.injectProperties(target, createdObject, graph);
                return createdObject;
            };
            Handler.prototype.injectConstructorArgs = function (args, graph, target) {
                var argsToInject = injectionMetadata.getConstructorArgsToInject(target);
                if (!argsToInject.hasArgs())
                    return args;
                return __spreadArray(__spreadArray([], args, true), new Array(Math.abs(args.length - argsToInject.size())), true).map(function (value, idx) {
                    return value !== null && value !== void 0 ? value : graph.retrieve(argsToInject.getProperty(idx));
                });
            };
            Handler.prototype.injectProperties = function (target, createdObject, graph) {
                injectionMetadata.getPropertiesToInject(target).forEach(function (key) {
                    Reflect.set(createdObject, key, graph.retrieve(key));
                });
            };
            return Handler;
        }())();
    };
    return ClassInjector;
}());
exports.default = ClassInjector;
//# sourceMappingURL=ClassInjector.js.map