"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Observable = void 0;
var Observable = /** @class */ (function () {
    function Observable(initialValue) {
        this.subscribers = new Set();
        this.currentValue = initialValue;
    }
    Object.defineProperty(Observable.prototype, "value", {
        get: function () {
            return this.currentValue;
        },
        set: function (value) {
            this.currentValue = value;
            this.subscribers.forEach(function (subscriber) { return subscriber(value); });
        },
        enumerable: false,
        configurable: true
    });
    Observable.prototype.subscribe = function (onNext) {
        var _this = this;
        if (this.subscribers.has(onNext)) {
            throw new Error('Subscriber already subscribed');
        }
        this.subscribers.add(onNext);
        return function () { return _this.subscribers.delete(onNext); };
    };
    Observable.prototype.unsubscribe = function (onNext) {
        if (!this.subscribers.has(onNext)) {
            throw new Error("Can't unsubscribe, subscriber doesn't exist");
        }
        this.subscribers.delete(onNext);
    };
    return Observable;
}());
exports.Observable = Observable;
//# sourceMappingURL=Observable.js.map