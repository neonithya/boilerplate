"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphRegistry = void 0;
var GraphMiddlewareChain_1 = __importDefault(require("./GraphMiddlewareChain"));
var GraphRegistry = /** @class */ (function () {
    function GraphRegistry() {
        this.constructorToInstance = new Map();
        this.instanceToConstructor = new Map();
        this.nameToInstance = new Map();
        this.graphToSubgraphs = new Map();
        this.graphMiddlewares = new GraphMiddlewareChain_1.default();
    }
    GraphRegistry.prototype.register = function (constructor, subgraphs) {
        if (subgraphs === void 0) { subgraphs = []; }
        this.graphToSubgraphs.set(constructor, new Set(subgraphs));
    };
    GraphRegistry.prototype.ensureRegistered = function (graph) {
        if (this.instanceToConstructor.get(graph))
            return;
        this.set(graph.constructor, graph);
    };
    GraphRegistry.prototype.getSubgraphs = function (graph) {
        var _this = this;
        var _a;
        var Graph = this.instanceToConstructor.get(graph);
        var subgraphs = (_a = this.graphToSubgraphs.get(Graph)) !== null && _a !== void 0 ? _a : new Set();
        return Array.from(subgraphs).map(function (G) { return _this.resolve(G); });
    };
    GraphRegistry.prototype.getGraphInstance = function (name) {
        return this.nameToInstance.get(name);
    };
    GraphRegistry.prototype.resolve = function (Graph, props) {
        if ((this.isSingleton(Graph) || this.isBoundToReactLifecycle(Graph)) && this.has(Graph)) {
            return this.getFirst(Graph);
        }
        var graph = this.graphMiddlewares.resolve(Graph, props);
        this.set(Graph, graph);
        return graph;
    };
    GraphRegistry.prototype.has = function (Graph) {
        var _a, _b;
        return ((_b = (_a = this.constructorToInstance.get(Graph)) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : 0) > 0;
    };
    GraphRegistry.prototype.getFirst = function (Graph) {
        return this.constructorToInstance.get(Graph).values().next().value;
    };
    GraphRegistry.prototype.set = function (Graph, graph) {
        var _a;
        var graphs = (_a = this.constructorToInstance.get(Graph)) !== null && _a !== void 0 ? _a : new Set();
        graphs.add(graph);
        this.constructorToInstance.set(Graph, graphs);
        this.instanceToConstructor.set(graph, Graph);
        this.nameToInstance.set(graph.name, graph);
    };
    GraphRegistry.prototype.isSingleton = function (Graph) {
        var _a;
        return (_a = Reflect.getMetadata('isSingleton', Graph)) !== null && _a !== void 0 ? _a : false;
    };
    GraphRegistry.prototype.isBoundToReactLifecycle = function (Graph) {
        var _a;
        return (_a = Reflect.getMetadata('isLifecycleBound', Graph)) !== null && _a !== void 0 ? _a : false;
    };
    GraphRegistry.prototype.clear = function (graph) {
        var Graph = this.instanceToConstructor.get(graph);
        if (this.isSingleton(Graph))
            return;
        this.instanceToConstructor.delete(graph);
        this.constructorToInstance.get(Graph).delete(graph);
        this.nameToInstance.delete(graph.name);
    };
    GraphRegistry.prototype.addGraphMiddleware = function (middleware) {
        this.graphMiddlewares.add(middleware);
    };
    GraphRegistry.prototype.clearGraphMiddlewares = function () {
        this.graphMiddlewares.clear();
    };
    GraphRegistry.prototype.clearAll = function () {
        this.instanceToConstructor.clear();
        this.constructorToInstance.clear();
        this.nameToInstance.clear();
    };
    return GraphRegistry;
}());
exports.GraphRegistry = GraphRegistry;
exports.default = new GraphRegistry();
//# sourceMappingURL=GraphRegistry.js.map