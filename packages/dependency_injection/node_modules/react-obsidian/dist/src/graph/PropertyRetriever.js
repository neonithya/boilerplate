"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var GraphRegistry_1 = __importDefault(require("./registry/GraphRegistry"));
var ProvidedPropertiesStore_1 = __importDefault(require("../ProvidedPropertiesStore"));
var PropertyRetriever = /** @class */ (function () {
    function PropertyRetriever(graph) {
        this.graph = graph;
    }
    PropertyRetriever.prototype.retrieve = function (property, receiver) {
        var mangledPropertyKey = ProvidedPropertiesStore_1.default.getMangledProperty(this.graph, property);
        if (mangledPropertyKey && mangledPropertyKey in this.graph) {
            var proxiedGraph = new Proxy(this.graph, {
                get: function (graph, dependencyName) {
                    return graph.retrieve(dependencyName);
                },
            });
            return Reflect.get(this.graph, mangledPropertyKey, receiver)(proxiedGraph);
        }
        var results = this.getFromSubgraphs(property, receiver);
        if (results.length === 1)
            return results[0];
        if (results.length > 1) {
            throw new Error("Multiple subgraphs provide the property ".concat(property, ".")
                + 'You should probably provide a unique name to one of the providers: @Provide({name: \'uniqueName\')})');
        }
        return undefined;
    };
    PropertyRetriever.prototype.getFromSubgraphs = function (property, receiver) {
        var subgraphs = GraphRegistry_1.default.getSubgraphs(this.graph);
        return subgraphs
            .map(function (subgraph) { return subgraph.retrieve(property, receiver); })
            .filter(function (result) { return result !== undefined; });
    };
    return PropertyRetriever;
}());
exports.default = PropertyRetriever;
//# sourceMappingURL=PropertyRetriever.js.map