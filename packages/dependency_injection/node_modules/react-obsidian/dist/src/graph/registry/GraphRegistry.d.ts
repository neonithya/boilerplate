import { Constructable } from '../../types';
import { Graph } from '../Graph';
import { Middleware } from './Middleware';
export declare class GraphRegistry {
    private readonly constructorToInstance;
    private readonly instanceToConstructor;
    private readonly nameToInstance;
    private readonly graphToSubgraphs;
    private readonly graphMiddlewares;
    register(constructor: Constructable<Graph>, subgraphs?: Constructable<Graph>[]): void;
    ensureRegistered(graph: Graph): void;
    getSubgraphs(graph: Graph): Graph[];
    getGraphInstance(name: string): Graph;
    resolve<T extends Graph>(Graph: Constructable<T>, props?: any): T;
    private has;
    private getFirst;
    private set;
    private isSingleton;
    private isBoundToReactLifecycle;
    clear(graph: Graph): void;
    addGraphMiddleware(middleware: Middleware<Graph>): void;
    clearGraphMiddlewares(): void;
    clearAll(): void;
}
declare const _default: GraphRegistry;
export default _default;
//# sourceMappingURL=GraphRegistry.d.ts.map