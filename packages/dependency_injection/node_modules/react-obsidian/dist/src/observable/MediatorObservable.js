"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediatorObservable = void 0;
var MediatorObservable = /** @class */ (function () {
    function MediatorObservable(initialValue) {
        this.subscribers = new Set();
        this.sources = [];
        this.currentValue = initialValue;
    }
    MediatorObservable.prototype.addSource = function (source, onNext) {
        this.sources.push({ source: source, onNext: onNext });
        return this;
    };
    Object.defineProperty(MediatorObservable.prototype, "value", {
        get: function () {
            return this.currentValue;
        },
        set: function (value) {
            this.currentValue = value;
            this.subscribers.forEach(function (subscriber) { return subscriber(value); });
        },
        enumerable: false,
        configurable: true
    });
    MediatorObservable.prototype.subscribe = function (onNext) {
        var _this = this;
        if (this.subscribers.has(onNext)) {
            throw new Error('Subscriber already subscribed');
        }
        this.subscribers.add(onNext);
        this.subscribeToAllSources();
        return function () {
            _this.subscribers.delete(onNext);
            _this.sources.forEach(function (_a) {
                var unsubscribe = _a.unsubscribe;
                return unsubscribe === null || unsubscribe === void 0 ? void 0 : unsubscribe();
            });
        };
    };
    MediatorObservable.prototype.subscribeToAllSources = function () {
        var _this = this;
        this.sources.forEach(function (_a, index) {
            var source = _a.source, onNext = _a.onNext;
            var unsubscribe = source.subscribe(function (value) {
                onNext(value);
            });
            _this.sources[index].unsubscribe = unsubscribe;
        });
    };
    return MediatorObservable;
}());
exports.MediatorObservable = MediatorObservable;
//# sourceMappingURL=MediatorObservable.js.map