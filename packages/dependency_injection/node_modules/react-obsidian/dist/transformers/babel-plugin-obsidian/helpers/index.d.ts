import { ClassMethod, ClassProperty, Decorator, Identifier, ObjectExpression, ObjectPattern, TSParameterProperty } from '@babel/types';
export type AcceptedNodeType = Identifier | TSParameterProperty | ClassProperty;
export declare function providerIsNotNamed(decorator: Decorator): boolean;
export declare function addNameToProviderArguments(node: ClassMethod, decorator: Decorator): void;
export declare function getDecoratorArgument(decorator: Decorator): ObjectExpression | undefined;
export declare function getMethodName(node: ClassMethod): string;
export declare function getDecoratorByName(decorators: Array<Decorator> | undefined | null, decoratorName: string): Decorator | undefined;
export declare function getDecoratorName(decorator?: Decorator): string | undefined;
export declare function paramsToDestructuringAssignment(params: (Identifier | any)[]): ObjectPattern;
export declare function passParamNameAsInjectArgument(node: AcceptedNodeType, decorator: Decorator): void;
//# sourceMappingURL=index.d.ts.map